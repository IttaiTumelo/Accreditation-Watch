@page "/programs"
@inject IProgramService ProgramService
@inject IDepartmentService DepartmentService
@inject ISchoolService SchoolService
@inject INoteService NoteService
@using Microsoft.AspNetCore.Components.QuickGrid
@using Program=Accreditation_Watch.Shared.Entities.Program
@inject NavigationManager  NavigationManager;
<!-- Modal Dialog Scrollable -->
<div class="modal fade" id="modalDialogScrollable" tabindex="-1">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@SelectedProgram?.Name</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                      @if(details)
                      {
                          <ProcessProgressDetails  Program="@SelectedProgram"/>
                      }
                      else{
                          <CardListSideBar Program ="@SelectedProgram"/>
                      }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Save changes</button>
            </div>
        </div>
    </div>
</div><!-- End Modal Dialog Scrollable-->

<!-- Modal Dialog Scrollable -->
<div class="modal fade" id="modalDialogScrollableAddProgram" tabindex="-1">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create a new program</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                
                <NewProgram/>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div><!-- End Modal Dialog Scrollable-->


<h3>Programs</h3>
@if(isLoading)
{
        <Loading/>
}else{




<div class="row parent">
     <div class="col-12 ">
          @if(ProgramService.Objects == null)
               {
                    <Loading/>
               }
               else if(ProgramService.Objects.Count == 0)
               {
                    <p>No programs found.</p>
               }
               else
               {
                   <div class="card h-100">
                       <div class="card-body">
                           <div class="row">
                           <h5 class="card-title col">Program list</h5>
                               <div class="col row">
                                   <button @onclick="()=>NewProgram()" class="col-5 button-outlined" data-bs-toggle="modal" data-bs-target="#modalDialogScrollableAddProgram">New Program</button>
                                   @* TODO: Inform the user that they can add departments and schools from the settings*@
                                   <div class="col">
                                       <div class="row mb-3">
                                           <label class="col col-form-label">Filter by School</label>
                                           <div class="col">
                                               <select class="form-select" aria-label="Default select example">
                                                   <option value="0">All</option>
                                                   @foreach (var department in DepartmentService.Objects)
                                                   {
                                                       <option @onclick="() => {departmentId = department.Id; StateHasChanged();}" value="@department.Id">@department.Name</option>
                                                   }
                                               </select>
                                           </div>
                                       </div>

                                   </div>
                               </div>
                               
                           </div>

                           <table class="table table-hover datatable">
                               <thead>
                               <tr>
                                   <th scope="col">#</th>
                                   <th scope="col">Name</th>
                                   <th scope="col">Time Left</th>
                                   <th scope="col">Department</th>
                                   <th scope="col">Status</th>
                                   <th scope="col">Actions</th>
                               </tr>
                               </thead>
                               <tbody>
                               @foreach (var context in FilteredPrograms)
                               {
                                   if (context.IsExpired())
                                   {
                                       <tr class="bg-danger">
                                           <th scope="col">@context.Id</th>
                                           <th scope="col">@context.Name</th>
                                           <th scope="col">@AWFunctions.GetTimeLeft(context.ValidTo)</th>
                                           <th scope="col">@context.Department.ShortName</th>
                                           <th scope="col">@context.IsExpired()</th>
                                           <th scope="col">
                                               <button @onclick="@(() => ShowDetails(context))" class="button-outlined  p-1 m-1" data-bs-toggle="modal" data-bs-target="#modalDialogScrollable">Details</button>
                                               @if (NoteService.Objects.Where(c => c.ProgramId == context.Id).Count() > 0)
                                               {
                                                   <button  data-bs-target="#modalDialogScrollable" @onclick="() => ShowCards(context)" class="button-outlined p-1 m-1">Comments/Notes</button>
                                               }
                                           </th>
                                       </tr>
                                   }
                                   else
                                   {
                                       <tr>
                                           <th scope="col">@context.Id</th>
                                           <th scope="col">@context.Name</th>
                                           <th scope="col">@AWFunctions.GetTimeLeft(context.ValidTo)</th>
                                           <th scope="col">@context.Department.ShortName</th>
                                           <th scope="col">@context.IsExpired()</th>
                                           <th scope="col">
                                               <button @onclick="@(() => ShowDetails(context))" class="button-outlined  p-1 m-1" data-bs-toggle="modal" data-bs-target="#modalDialogScrollable">Details</button>
                                               @if (NoteService.Objects.Where(c => c.ProgramId == context.Id).Count() > 0)
                                               {
                                                   <button  data-bs-target="#modalDialogScrollable" @onclick="() => ShowCards(context)" class="button-outlined p-1 m-1">Comments/Notes</button>
                                               }
                                           </th>
                                       </tr>
                                   }
                            

                               }
                               </tbody>
                           </table>
                       </div>
                   </div>
               }
     </div>

      <div class="col-lg-4 pt-1">

    </div>
    
</div>
}



@code {


     public bool isLoading { get; set; } = true;

    void Update(){
        pagination = new PaginationState { ItemsPerPage = rows };
        StateHasChanged();
    }
    static int rows {get; set;} = 10;
    public bool details = true;
    public int departmentId;
    IQueryable<Program>? itemsQueryable;

    IQueryable<Program> FilteredPrograms
    {
        get
        {
            var result = itemsQueryable?.Where(c => c.Id <= 2000);

            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c => c.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));

            }
            if (departmentId != 0) result = result.Where(c => c.DepartmentId == departmentId);

            //if (minMedals > 0)
            //{
            //    result = result.Where(c => c.Medals.Total >= minMedals);
            //}

            return result;
        }
    }

    public bool visible = false;
    public bool school = true;
    public bool ProgramVisibility { get; set; } = false;
    public bool NewProgramVisibility { get; set; } = false;
    public string nameFilter;
    Task ShowDetails(Program program)
    {
        ResetAll();
        details = true;
        SelectedProgram = program;
        ProgramVisibility = true;
        StateHasChanged();
        return Task.CompletedTask; 
    }
    Task ShowCards(Program program)
    {
        ResetAll();
        details = false;
        SelectedProgram = program;
        ProgramVisibility = true;
        StateHasChanged();
        return Task.CompletedTask; 
    }
    Task NewProgram()
    { 
        ResetAll();
        NewProgramVisibility = NewProgramVisibility ? false : true;

        StateHasChanged();
        return Task.CompletedTask; 
    }


    Task Update(Program program)
    { 
        ResetAll();
        SelectedProgram = program;
        StateHasChanged();
        return Task.CompletedTask; 
    }
    void ResetAll()
    {
        ProgramVisibility = NewProgramVisibility = false;
        StateHasChanged();
    }
    Task ViewDepartment()
    {
        NavigationManager.NavigateTo("settings/departments");
        return Task.CompletedTask;
    }
    Task ViewSchool()
    {
            NavigationManager.NavigateTo("settings/schools");
        return Task.CompletedTask;
    }
    PaginationState pagination = new PaginationState { ItemsPerPage = rows };

     Program SelectedProgram { get; set; }

     private PieConfig _config;

protected override async void OnInitialized()
     {
        await ProgramService.Get();
        await SchoolService.Get();
        await DepartmentService.Get();
        await NoteService.Get();
        isLoading =!(ProgramService.Objects is not null && SchoolService.Objects is not null && DepartmentService.Objects is not null && NoteService.Objects is not null);
        itemsQueryable = ProgramService.Objects.AsQueryable();
          StateHasChanged();
    _config = new PieConfig
    {
        Options = new PieOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = true,
                Text = "ChartJs.Blazor Pie Chart"
            }
        }
    };

    foreach (string color in new[] { "Red", "Yellow", "Green", "Blue" })
    {
        _config.Data.Labels.Add(color);
    }

    PieDataset<int> dataset = new PieDataset<int>(new[] { 6, 5, 3, 7 })
    {
        BackgroundColor = new[]
        {
            ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
            ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
            ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
            ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
        }
    };

    _config.Data.Datasets.Add(dataset);
    StateHasChanged();
}
  
}


