@page "/programs"
@inject IProgramService ProgramService
@inject IDepartmentService DepartmentService
@inject ISchoolService SchoolService
@inject INoteService NoteService
@using Microsoft.AspNetCore.Components.QuickGrid
@inject NavigationManager  NavigationManager;
<style>

</style>
<div class="row">
     <div class="col-4">
          <h2>Programs</h2>
     </div>
     <div class="col-8">
         <div class="row">
            <button @onclick="() => NewProgram()" class="btn  btn-info col mx-1">New Program</button>
            <button @onclick="ViewDepartment" class="btn  btn-info col mx-1">View Departments</button>
            <button @onclick="ViewSchool" class="btn  btn-info col mx-1">School School</button>
         </div>
     </div>
</div>


<div class="row">
    <div class="col"></div>
    <div class="col"></div>
    <div class="col"></div>
    <div class="col">
        <div class="row">
            <label for="customRange2" class="col form-label">Rows</label>
            <input type="range" class="col form-range" min="10" max="30" id="customRange2" @bind="@rows" @oninput="Update" >       

        </div>
    </div>
    <div class="col">
        
        <select type="text" @bind="@departmentId" class="form-control" placeholder="All">
            <option  value="0">All</option>
            @foreach (var department in DepartmentService.Objects)
            {
            <option @onclick="()=>{departmentId=department.Id; StateHasChanged();}" value="@department.Id">@department.Name</option>
            }
        </select>

    </div>

    
</div>
<div class="row parent">
     <div class="col-8 ">
          @if(ProgramService.Objects == null)
               {
                    <Loading/>
               }
               else if(ProgramService.Objects.Count == 0)
               {
                    <p>No programs found.</p>
               }
               else
               {
                    @* <div class="grid"> *@
            <QuickGrid Items="FilteredPrograms" Pagination="@pagination" Theme="default">
                <PropertyColumn Property="@(c => c.ShortName)" Title="Program" Sortable="true" Class="country-name">
                    <ColumnOptions>
                        <div class="search-box">
                            <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Country name..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                @*<PropertyColumn Property="p => p.Department.Name" Sortable="true" Title="Department" />*@
                         @*<PropertyColumn Property="p => p.Status.Name" Sortable="true" />*@
                         @* <PropertyColumn Property="p => p.ValidTo" Sortable="true" /> *@
                         <PropertyColumn Property="p => p.Department.ShortName" Title="Department" Sortable="true" />
                         @* <PropertyColumn Property="p => p.IsAccredited" Sortable="true" /> *@
                         @* <PropertyColumn Property="p => p.GetDuration()" Sortable="true" Title="Duration" /> *@
                         <PropertyColumn Property="p => p.IsExpired()" Sortable="true" Title="Expired" />
                         <TemplateColumn Title="Actions">
                              <button @onclick="@(() => ShowDetails(context))" class="badge btn-primary">Details</button>
                              @if(NoteService.Objects.Where(c=>c.ProgramId == context.Id).Count() > 0)
                              {
                                   <button @onclick="()=>ShowCards(context)" class="badge btn-primary">Comments/Notes</button>
                              }
                         </TemplateColumn>
                    </QuickGrid>
                    @* </div> *@

               <Paginator Value="@pagination" />
               }
     </div>

      <div class="col-4 pt-1">
        @if(details)
        {
            <ProcessProgressDetails  Program="@SelectedProgram"/>
        }
        else{
            <CardListSideBar Program ="@SelectedProgram"/>
        }
    </div>
    
</div>
   @* @if(SelectedProgram is not null){
          <ProgramDetails Program="@SelectedProgram" IsVisible="@ProgramVisibility" />
     } *@
<NewProgram  IsVisible="@NewProgramVisibility" />


@* @if(_config != null){
     <div class="row">
          <div class="col-4">
               <Chart Config="@_config" />
          </div>
          <div class="col-4">
               <Chart Config="@_config" />
          </div>
          <div class="col-4">
               <Chart Config="@_config" />
          </div>
          <div class="col-4">
               <Chart Config="@_config" />
          </div>
     </div>
} *@

@code {
    void Update(){
        pagination = new PaginationState { ItemsPerPage = rows };
        StateHasChanged();
    }
    static int rows {get; set;} = 10;
    public bool details = true;
    public int departmentId;
    IQueryable<AWProgram>? itemsQueryable;

    IQueryable<AWProgram> FilteredPrograms
    {
        get
        {
            var result = itemsQueryable?.Where(c => c.Id <= 2000);

            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c => c.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));

            }
            if (departmentId != 0) result = result.Where(c => c.DepartmentId == departmentId);

            //if (minMedals > 0)
            //{
            //    result = result.Where(c => c.Medals.Total >= minMedals);
            //}

            return result;
        }
    }

    public bool visible = false;
    public bool school = true;
    public bool ProgramVisibility { get; set; } = false;
    public bool NewProgramVisibility { get; set; } = false;
    public string nameFilter;
    Task ShowDetails(AWProgram program)
    {
        ResetAll();
        details = true;
        SelectedProgram = program;
        ProgramVisibility = true;
        StateHasChanged();
        return Task.CompletedTask; 
    }
    Task ShowCards(AWProgram program)
    {
        ResetAll();
        details = false;
        SelectedProgram = program;
        ProgramVisibility = true;
        StateHasChanged();
        return Task.CompletedTask; 
    }
    Task NewProgram()
    { 
        ResetAll();
        NewProgramVisibility = NewProgramVisibility ? false : true;

        StateHasChanged();
        return Task.CompletedTask; 
    }


    Task Update(AWProgram program)
    { 
        ResetAll();
        SelectedProgram = program;
        StateHasChanged();
        return Task.CompletedTask; 
    }
    void ResetAll()
    {
        ProgramVisibility = NewProgramVisibility = false;
        StateHasChanged();
    }
    Task ViewDepartment()
    {
        NavigationManager.NavigateTo("settings/departments");
        return Task.CompletedTask;
    }
    Task ViewSchool()
    {
            NavigationManager.NavigateTo("settings/schools");
        return Task.CompletedTask;
    }
    PaginationState pagination = new PaginationState { ItemsPerPage = rows };

     AWProgram SelectedProgram { get; set; }

     private PieConfig _config;

protected override async void OnInitialized()
     {
          await ProgramService.Get();
        await SchoolService.Get();
        await DepartmentService.Get();
        await NoteService.Get();
        itemsQueryable = ProgramService.Objects.AsQueryable();
          StateHasChanged();
    _config = new PieConfig
    {
        Options = new PieOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = true,
                Text = "ChartJs.Blazor Pie Chart"
            }
        }
    };

    foreach (string color in new[] { "Red", "Yellow", "Green", "Blue" })
    {
        _config.Data.Labels.Add(color);
    }

    PieDataset<int> dataset = new PieDataset<int>(new[] { 6, 5, 3, 7 })
    {
        BackgroundColor = new[]
        {
            ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
            ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
            ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
            ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
        }
    };

    _config.Data.Datasets.Add(dataset);
    StateHasChanged();
}
  
}


