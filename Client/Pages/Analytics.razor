@page "/analytics"
@inject IProgramService ProgramService
@inject IProblemService ProblemService
<h3>Analytics</h3>
<div class="row">
    <div class="col-8">
        <div class="row">
            <div class="">
                <h3 class="d-flex">
                    <img src="/images/triangle.svg" width="20" class="m-2" />
                    Program Summeries
                </h3>
                <div class="grid">
                    <ol>
                        @if (messages is not null)
                            @for (int i = 0; i < limit && i < messages.Count; i++)//must change to variable
                                {
                                <li>
                                    <div class="row">
                                        <div class="col">
                                            <h5>@messages[i].Description </h5>
                                        </div>
                                    </div>
                                </li>
                            }
                        else {
                            <li>
                                <div class="row">
                                    <div class="col">
                                        <h5>No Programs</h5>
                                    </div>
                                </div>
                            </li>
                        }
                    </ol>
                </div>
                <div class="col">
                    <span @onclick="SetUnlimited" class="badge rounded-pill bg-dark p-2 float-end">@viewprogram</span>
                </div>
            </div>
        </div>


        @if (ProblemService.Objects.Count > 0)
        {
            <h3>Issues</h3>
            <QuickGrid Items="FilteredProblems" Pagination="@pagination" Theme="default">
                <PropertyColumn Property="@(c => c.Name)" Sortable="true" Class="country-name">
                    <ColumnOptions>
                        <div class="search-box">
                            <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Country name..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                @*<PropertyColumn Property="p => p.Department.Name" Sortable="true" Title="Department" />*@
                @*<PropertyColumn Property="p => p.Status.Name" Sortable="true" />*@
                <PropertyColumn Property="p => p.IsResolved" Sortable="true" />
                <PropertyColumn Property="p => p.Description" Sortable="true" />
                <TemplateColumn Title="Program">
                        <p>@ProgramService.Objects?.FirstOrDefault(x=>x.Id==context.AWProgramId)?.Name</p>
                </TemplateColumn>
                <TemplateColumn Title="Actions">
                    @* <button @onclick="@(() => Update(context))" class="btn btn-outline-light">Update</button> *@
                </TemplateColumn>
            </QuickGrid>
            <Paginator Value="@pagination" />  
        }
        else
        {
            <button @onclick="MakeIssues" class="btn btn-info">Create Issues</button>
        }
    </div>
    <div class="col-4">
        <IssueDetails/>
    </div>
</div>

@code {
    public string viewprogram { get; set;} = "View All";
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    List<AWProgram>? programs { get; set; } = new();
    List<Problem>? messages { get; set; } = new();
    public string nameFilter;

    public int limit = 3;
    public void SetUnlimited()
    {
        limit = limit == 3 ? messages.Count: 3;
        if(limit == 3) viewprogram = " View All"; else viewprogram = "View Less";
        StateHasChanged();
    }

    IQueryable<Problem> FilteredProblems
    {
        get
        {
            var result = ProblemService.Objects.AsQueryable();

            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c => c.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));

            }

            //if (minMedals > 0)
            //{
            //    result = result.Where(c => c.Medals.Total >= minMedals);
            //}

            return result;
        }
    }


    ProgramSummery? programSummery = new();
    protected override async void OnInitialized()
    {
        programs = await ProgramService.Get();
        await ProblemService.Get();
        programSummery = new(programs);

        messages = programSummery.GenerateSummaries();
        //if(messages.Count > 3)
        //messages.RemoveRange(3, messages.Count - 3);
        //_programs = await ProgramService.Get();
        //ProgramSummery = new ProgramSummery(_programs);
        //StateHasChanged();

        StateHasChanged();


        //print to the condole stat
        foreach (var item in programSummery.GenerateStatuses(false))
        {
            Console.WriteLine(item.Name);
            Console.WriteLine(item.Status[0]);
            Console.WriteLine(item.Status[1]);
        }
        int[] dataset1 = new int[programSummery.GenerateStatuses(false).Count];
        int[] dataset2 = new int[programSummery.GenerateStatuses(false).Count];
        for (int i = 0; i < programSummery.GenerateStatuses(false).Count; i++)
        {
            dataset1[i] = programSummery.GenerateStatuses(false)[i].Status[0];
            dataset2[i] = programSummery.GenerateStatuses(false)[i].Status[1];
        }
        StateHasChanged();
    }
    Task MakeIssues()
    {
        foreach(var issue in messages)
        {
            ProblemDto problem = new()
            {
                Name = issue.Name,
                AWProgramId = issue.Program.Id,
                Description = issue.Description,
                IsResolved = false
            };
            if(!ProblemService.Objects.Any(p => p.Description == problem.Description))
            {
                ProblemService.Create(issue);
            }
        }
        return Task.CompletedTask;
    }
}

