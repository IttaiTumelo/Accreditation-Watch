@page "/analytics"
@inject IProgramService ProgramService
@inject IProblemService ProblemService
@inject IAuthService AuthService
@inject IUserService UserService
@inject IAWTaskService AWTaskService
@attribute [Authorize]
<h3>Analytics</h3>

@if(loading)
{
    <Loading />

}
else 
{
<div id="@Visibility" class="d-flex justify-content-center align-items-center">
        <div style="background-color : #fff; border-radius: 10px; width: 80%" class="p-3">
          <div class="row">
                      <h5 class="col">Checking prgrams for potential problems</h5>
                      <div class="col-1"><button @onclick="()=>Close()" class=" btn-close btn-danger"></button></div>
          </div>
            <p class="text-success">@SuccessMessage</p>
        <span class="text-danger">@ErrorMessage</span>
        <div id="@UpdatingResults" class="d-flex justify-content-center align-items-center">
            <div class="loading-section @StyleOne() p-5 " style="width:100%; background-color : #fff; border-radius: 10px;">
                <p>Analyzing data ...</p>
                <div class="progress-container">
                    <div class="progress-bar" style="@_progressBarStyle"></div>
                </div>
                <p class="col">@percentage %  @jobDiscription</p>
            </div>
        </div>
        </div>
</div>

<div class="row">
    <div class="col-lg-8">
        <div class="row">
            <div class="">
                <h3 class="d-flex">
                    <img src="/images/triangle.svg" width="20" class="m-2" />
                    Program Summeries
                </h3>
                <div class="grid">
                    <ol>
                        @if (messages is not null)
                            @for (int i = 0; i < limit && i < messages.Count; i++)//must change to variable
                                {
                                <li>
                                    <div class="row">
                                        <div class="col">
                                            <h5>@messages[i].Description </h5>
                                        </div>
                                    </div>
                                </li>
                            }
                        else {
                            <li>
                                <div class="row">
                                    <div class="col">
                                        <h5>No Programs</h5>
                                    </div>
                                </div>
                            </li>
                        }
                    </ol>
                </div>
                <div class="col">
                    <span @onclick="SetUnlimited" class="badge rounded-pill bg-dark p-2 float-end">@viewprogram</span>
                </div>
            </div>
        </div>


        @if (ProblemService.Objects?.Count > 0)
        {
            <h3>Issues</h3>
            <QuickGrid Items="FilteredProblems" Pagination="@pagination" Theme="default">
                <PropertyColumn Property="@(c => c.Name)" Sortable="true" Class="country-name">
                    <ColumnOptions>
                        <div class="search-box">
                            <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Country name..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                @*<PropertyColumn Property="p => p.Department.Name" Sortable="true" Title="Department" />*@
                @*<PropertyColumn Property="p => p.Status.Name" Sortable="true" />*@
                @* <PropertyColumn Property="p => p.IsResolved" Sortable="true" /> *@
                <PropertyColumn Property="p => p.ShortDescription" Sortable="true" />
                
                <TemplateColumn Title="Actions/State">
                    <button @onclick ="@(() => SelectedProblem = context)" class=" button-outlined p-1 m-1">Details</button>
                    @if(!context.Noted)
                    {
                    <AuthorizeView Context="authContext" Roles="Developer, Director">
                            <button @onclick="@(() => CreateTask(context))" class=" button-outlined p-1 m-1">Make Task</button>
                        </AuthorizeView>
                    }
                    else 
                    {
                        <button disabled @onclick="@(() => CreateTask(context))" class=" button-outlined p-1 m-1">Tasked</button>
                    }
                </TemplateColumn>
            </QuickGrid>
            <Paginator Value="@pagination" />  
            @* <button @onclick="MakeIssues" class="btn btn-info">Create Issues</button> *@
        }
        else
        {
            <p>No Problems</p>
            @* <button @onclick="MakeIssues" class="btn btn-info">Create Issues</button> *@
        }
    </div>
    <div class="col-lg-4">
        <IssueDetails Problem="@SelectedProblem"/>
    </div>
</div>
}


@code {
    public bool IsVisible { get; set; } = false;
    public string Visibility => IsVisible ? "show-overlay" : "hide-overlay";
    public string SuccessMessage { get; set; } = "";
    public string ErrorMessage { get; set; } = "";
    public string UpdatingResults { get; set; }
    public string _progressBarStyle = "width: 00%; transition: width 1s ease-in-out;";
    public bool loading = false;
    public string StyleOne() => loading ? _loadingStyle : _notLoadingStyle;
    public string _loadingStyle = "display: flex; align-items: center; justify-content: center;";    public string _notLoadingStyle = "display: none;";
  public void Close()
    {
        IsVisible = false;
    }
    Problem? SelectedProblem { get; set; }
    async Task CreateTask(Problem problem)
    {
        var userId = await AuthService.GetId();
        AWTaskDto task = new AWTaskDto()
        {
            Description = problem.Description,
            Name = problem.Name,
            ProblemId = problem.Id,
            Assignee = UserService.Objects.FirstOrDefault(u => u.Id == userId),
            AssignedTo= UserService.Objects.FirstOrDefault(u => u.Id == userId),
            AssigneeId=userId,
            AssignedToId= userId,
            
        };
        await AWTaskService.Create(task);
        StateHasChanged();
        Close();

    }
    int Progress { get; set; } = 1;
    int Total { get; set; } = 100;
    public string viewprogram { get; set;} = "View All";
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    List<AWProgram>? programs { get; set; } = new();
    List<Problem>? messages { get; set; } = new();
    public string nameFilter;
    public string jobDiscription { get; set; }

    public int limit = 3;
    public void SetUnlimited()
    {
        limit = limit == 3 ? messages.Count: 3;
        if(limit == 3) viewprogram = " View All"; else viewprogram = "View Less";
        StateHasChanged();
    }

    IQueryable<Problem> FilteredProblems
    {
        get
        {
            var results = ProblemService.Objects;
            foreach (var r in results)
            {
                r.Noted = AWTaskService.Objects.Any(t => t.ProblemId == r.Id);
            }
            var result = results.AsQueryable();
            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c => c.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));

            }
            if(result is null || result.Count() == 0) return new List<Problem>().AsQueryable();
            //if (minMedals > 0)
            //{
            //    result = result.Where(c => c.Medals.Total >= minMedals);
            //}

            return result;
        }
    }


    ProgramSummery? programSummery = new();
    protected override async void OnInitialized()
    {
        await AWTaskService.Get();
        await UserService.Get();
        await AuthService.InitialiseAuthState();
        programs = await ProgramService.Get();
        await ProblemService.Get();
        programSummery = new(programs);

        messages = programSummery.GenerateSummaries();
        await MakeIssues();

        //if(messages.Count > 3)
        //messages.RemoveRange(3, messages.Count - 3);
        //_programs = await ProgramService.Get();
        //ProgramSummery = new ProgramSummery(_programs);
        //StateHasChanged();
        
        StateHasChanged();
        loading = !(
             ProgramService.Objects is not null &&
                ProblemService.Objects is not null &&
                UserService.Objects is not null &&
                AWTaskService.Objects is not null &&
                UserService.Objects is not null 

            );
        


        //print to the condole stat
        foreach (var item in programSummery.GenerateStatuses(false))
        {
            Console.WriteLine(item.Name);
            Console.WriteLine(item.Status[0]);
            Console.WriteLine(item.Status[1]);
        }
        int[] dataset1 = new int[programSummery.GenerateStatuses(false).Count];
        int[] dataset2 = new int[programSummery.GenerateStatuses(false).Count];
        for (int i = 0; i < programSummery.GenerateStatuses(false).Count; i++)
        {
            dataset1[i] = programSummery.GenerateStatuses(false)[i].Status[0];
            dataset2[i] = programSummery.GenerateStatuses(false)[i].Status[1];
        }
        StateHasChanged();
    }
    async Task MakeIssues()
    {
        IsVisible = true;
        Total = messages.Count;
        Progress = 0;
        StateHasChanged();
            await Task.Delay(500);

        foreach(var issue in messages)
        {
            Console.WriteLine(issue.Program.ToString());
            ProblemDto problem = new()
            {
                Name = issue.Name,
                AWProgramId = issue.Program.Id,
                Description = issue.Description,
                IsResolved = false
            };
            if(!ProblemService.Objects.Any(p => p.Description == problem.Description))
            {
                ProblemService.Create(problem);
            }
            Progress++;
            UpdateLoading();
            
        }
        await ProblemService.Get(true);
            await Task.Delay(500);

        IsVisible  =false;
        StateHasChanged();
    }
    int percentage = 0;
        public void UpdateLoading()
    {
        percentage = (Progress * 100) / Total;
        _progressBarStyle = $"width: {percentage}%; transition: width 0.3s ease-in-out;";
        StateHasChanged();
    }
}

