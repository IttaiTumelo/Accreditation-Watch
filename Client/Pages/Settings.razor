@page "/settings"
<style>
    .vbody {
    min-height: 80vh;
    min-height: -webkit-fill-available;
    }


    .vmain {
    display: flex;
    flex-wrap: nowrap;
    height: 80vh;
    height: -webkit-fill-available;
    max-height: 100vh;
    overflow-x: auto;
    overflow-y: hidden;
    }

    .b-example-divider {
    flex-shrink: 0;
    width: 1.5rem;
    height: 100vh;
    background-color: rgba(0, 0, 0, .1);
    border: solid rgba(0, 0, 0, .15);
    border-width: 1px 0;
    box-shadow: inset 0 .5em 1.5em rgba(0, 0, 0, .1), inset 0 .125em .5em rgba(0, 0, 0, .15);
    }

    .bi {
    vertical-align: -.125em;
    pointer-events: none;
    fill: currentColor;
    }

    .dropdown-toggle { outline: 0; }

    .nav-flush .nav-link {
    border-radius: 0;
    }

    .btn-toggle {
    display: inline-flex;
    align-items: center;
    padding: .25rem .5rem;
    font-weight: 600;
    color: rgba(0, 0, 0, .65);
    background-color: transparent;
    border: 0;
    }
    .btn-toggle:hover,
    .btn-toggle:focus {
    color: rgba(0, 0, 0, .85);
    background-color: #d2f4ea;
    }

    .btn-toggle::before {
    width: 1.25em;
    line-height: 0;
    content: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='rgba%280,0,0,.5%29' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M5 14l6-6-6-6'/%3e%3c/svg%3e");
    transition: transform .35s ease;
    transform-origin: .5em 50%;
    }

    .btn-toggle[aria-expanded="true"] {
    color: rgba(0, 0, 0, .85);
    }
    .btn-toggle[aria-expanded="true"]::before {
    transform: rotate(90deg);
    }

    .btn-toggle-nav a {
    display: inline-flex;
    padding: .1875rem .5rem;
    margin-top: .125rem;
    margin-left: 1.25rem;
    text-decoration: none;
    }
    .btn-toggle-nav a:hover,
    .btn-toggle-nav a:focus {
    background-color: #d2f4ea;
    }

    .scrollarea {
    overflow-y: auto;
    }

    .fw-semibold { font-weight: 600; }
    .lh-tight { line-height: 1.25; }

</style>
<div class="row">
    <div class="col-1">

<div class="vbody">
    <div class="vmain">

        <div class="d-flex flex-column flex-shrink-0 bg-light" style="width: 4.5rem;">
            <ul class="nav nav-pills nav-flush flex-column mb-auto text-center">
                <li class="nav-item">
                    <a @onclick="Users" class="nav-link activeL py-3 border-bottom" aria-current="page" title="Manage Users" data-bs-toggle="tooltip" data-bs-placement="right">
                        <img src="/images/users-gear-solid.svg" alt="users">
                    </a>
                </li>
                <li>
                    <a @onclick="Database" class="nav-link py-3 border-bottom" title="Manage Data" data-bs-toggle="tooltip" data-bs-placement="right">
                        <img src="/images/server-solid.svg" alt="">
                    </a>
                </li>
            </ul>
            <div class="dropdown border-top">
                <a href="#" class="d-flex align-items-center justify-content-center p-3 link-dark text-decoration-none dropdown-toggle" id="dropdownUser3" data-bs-toggle="dropdown" aria-expanded="false">
                    <img src="https://github.com/mdo.png" alt="mdo" width="24" height="24" class="rounded-circle">
                </a>
                <ul class="dropdown-menu text-small shadow" aria-labelledby="dropdownUser3">
                    <li><a class="dropdown-item" href="#">New project...</a></li>
                    <li><a class="dropdown-item" href="#">Settings</a></li>
                    <li><a class="dropdown-item" href="#">Profile</a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item" href="#">Sign out</a></li>
                </ul>
            </div>
        </div>
            </div>
        </div>

        @*<UserManagement/>
            <FileUpload/>*@

    </div>
    <div class="col">
        @Render(SelectedSetting)
    </div>
</div>

@code {
    public RenderFragment Render(Type type) => builder =>
    {
        builder.OpenComponent(0, type);
        builder.CloseComponent();
    };
    public Type SelectedSetting { get; set; } = typeof(UserManagement);
    Task Users() 
    {
         SelectedSetting = typeof(UserManagement);
         return Task.CompletedTask;
    }
    Task Database()
    {
        SelectedSetting = typeof(FileUpload);
        return Task.CompletedTask;
    }
}