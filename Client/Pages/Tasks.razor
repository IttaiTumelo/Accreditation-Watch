@page "/tasks"
@inject IAWTaskService AWTaskService   
@inject IProblemService ProblemService

@if(isLoading)
{
    <Loading />
}
else
{
    <div class="row">
        <div class="col-lg-9 col-md-6  col-sm-6 ">
            <h3>Tasks</h3>
        </div>
        <div class="col-lg-3 col-md-6  col-sm-6 ">
            <button @onclick="HowAddTask" class="button-outlined col-12">Add Task</button>
        </div>
    </div>
<div class="row">
    <div class="col-lg-8 col-md-12">
        @if(AWTaskService.Objects is null)
        {
            <Loading />
        }
        
        <QuickGrid Items="FilteredTasks" Pagination="@pagination" Theme="default">
            <PropertyColumn Property="@(c => c.ShortName)" Sortable="true" Class="country-name">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Task Name..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            @* <PropertyColumn Property="p => p.Assignee.Name" Sortable="true" Title="Assigned by" /> *@
            @* <PropertyColumn Property="p => p.AssignedTo.Name" Sortable="true" Title="Assigned to" /> *@
            <PropertyColumn Property="p => p.Due" Sortable="true" />
            @* <PropertyColumn Property="p => p.Type" Sortable="true" /> *@
            <PropertyColumn Property="p => p.ProgressString" Sortable="true" Title="Progress" />
            @* <PropertyColumn Property="p => p.Problem.Description" Sortable="true" /> *@
            @* <PropertyColumn Property="p => p.Problem.IsResolved" Sortable="true" Title="Duration" /> *@
            <TemplateColumn Title="Actions">
                    <button @onclick="()=>SelectTask(context)" class="button-outlined p-1 m-1">Details</button>
                    <button @onclick="()=>SelectNotes(context)" class="button-outlined p-1 m-1">Comments/Notes</button>
            </TemplateColumn>
        </QuickGrid>
        @* </div> *@

        <Paginator Value="@pagination" />


        <div>
            @* <h3>AutoGenerated Possible Issues</h3> *@
            
        </div>
    </div>
    <div class="col-lg-4 col-md-12">
        @if(isDetails)
        {
            <TaskDetails Task="@SelectedTask"/>
        }
        else
        {
            <TaskNoteSideBar Task="@SelectedTask"/>
        }
    </div>
</div>
}




<AddTask IsVisible="@AddTaskVisibility" OnClose="HideAddTask" />

@code {
    bool isDetails = true;
    public AWTask? SelectedTask { get; set; }
    void SelectTask(AWTask task)
    {
        isDetails = true;
        SelectedTask = task;
        StateHasChanged();
    }
    async Task Complete(AWTask task)
    {
        task.IsCompleted = true;
        await AWTaskService.Update(task);
        await AWTaskService.Get(true);
        StateHasChanged();
    }
    async Task SelectNotes(AWTask task)
    {
        SelectedTask = task;
        isDetails = false;
        StateHasChanged();
    }
    async Task Edit(AWTask task)
    {
        throw new NotImplementedException();
    }
    public bool AddTaskVisibility { get; set; } = false;
    public void HowAddTask()
    {
        AddTaskVisibility = true;
    }
    async Task HideAddTask()
    {
        AddTaskVisibility = false;
        await AWTaskService.Get(true);
        OnInitialized();
    }
    public IQueryable<AWTask>? itemsQueryable;
    public string nameFilter = "";
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };


    IQueryable<AWTask> FilteredTasks
    {
        
        get
        {
            itemsQueryable = AWTaskService.Objects.AsQueryable();
            var filtered = itemsQueryable;

            if (!string.IsNullOrWhiteSpace(nameFilter))
            {
                filtered = filtered.Where(p => p.Name.Contains(nameFilter));
            }
            return filtered;
        }
    }
    public bool isLoading { get; set; } = true;

    protected override async void OnInitialized()
    {
        await AWTaskService.Get();
        //await ProblemService.Get();
        StateHasChanged();


        isLoading =!(
            AWTaskService.Objects is not null
            @* SchoolService.Objects is not null &&  *@
            @* DepartmentService.Objects is not null &&  *@
            @* NoteService.Objects is not null && *@
            @* UserService.Objects is not null *@
            );
        StateHasChanged();
    }

}
