@page "/tasks"
@using Task=Accreditation_Watch.Shared.Entities.Task
@inject IAWTaskService AWTaskService   
@inject IProblemService ProblemService
@inject IAWTaskService TaskService
@inject AuthenticationStateProvider AuthenticationStateProvider

<!-- Vertically centered Modal -->
@* <div class="modal fade" id="verticalycentered" tabindex="-1"> *@
@*     <div class="modal-dialog modal-dialog-centered modal-xl"> *@
@*         <div class="modal-content"> *@
@*             <div class="modal-header"> *@
@*                 <h5 class="modal-title">New Centered</h5> *@
@*                 <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button> *@
@*             </div> *@
@*             <div class="modal-body"> *@
@*                 <AddTask  OnClose="HideAddTask" /> *@
@*             </div> *@
@*             <div class="modal-footer"> *@
@*                 <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button> *@
@*                 <button type="button" class="btn btn-primary">Save changes</button> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* </div><!-- End Vertically centered Modal--> *@
<!-- Vertically centered Modal -->
<div class="modal fade" id="modalDialogScrollable" tabindex="-1">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@SelectedTask?.Name</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (isDetails)
                {
                    @if (SelectedTask is not null)
                    {

                        <div class="row grid-max-height">
                            <div class="col-12">
                                <h5>Basic Information</h5>
                                <div class="form-group">
                                    <label for="program-name">Name</label>
                                    <input type="text" class="form-control" id="program-name" @bind="SelectedTask.Name" disabled/>
                                </div>
                                @* <div class="form-group"> *@
                                @*     <label for="program-name">Department</label> *@
                                @*     <input type="text" class="form-control" id="program-name" @bind="SelectedTask.Program.Department.Name" disabled/> $1$must change this to the actual school name#1# *@
                                @* </div> *@
                            </div>
                            <div class="col-12">
                                <h5>Accreditation Process</h5>
                                <div>
                                    @if (true)
                                    {
                                        @foreach (var progress in Enum.GetValues(typeof(Progress)))
                                        {
                                            @if (progress.Equals(SelectedTask.Progress))
                                            {
                                                <div class="step step-active">
                                                    <div>
                                                        <div class="circle">@((int)progress)</div>
                                                    </div>
                                                    <div>
                                                        <div class="title">@progress</div>
                                                        @* <div class="caption">Optional</div> *@
                                                    </div>
                                                </div>
                                            }
                                            else if ((int)progress < (int)SelectedTask.Progress)
                                            {
                                                <div class="step step-completed">
                                                    <div>
                                                        <div class="circle">@((int)progress)</div>
                                                    </div>
                                                    <div>
                                                        <div class="title">@progress</div>
                                                        @* <div class="caption">Optional</div> *@
                                                    </div>
                                                </div>
                                            }
                                            else if ((int)progress > (int)SelectedTask.Progress)//else
                                            {
                                                <div class="step">
                                                    <div>
                                                        <div class="circle">@((int)progress)</div>
                                                    </div>
                                                    <div>
                                                        <div class="title">@progress</div>
                                                        @* <div class="caption">Optional</div> *@
                                                    </div>
                                                </div>
                                            }
                                        }
                                    }
                                </div>
                                <div>
                                    <h6>Update Status</h6>
                                    <InputSelect @bind-Value="SelectedTask.Progress" class="form-select" aria-label="Default select example">
                                        <option value="@SelectedTask.Progress">@SelectedTask.Progress</option>
                                        @foreach (var progress in Enum.GetValues(typeof(Progress)))
                                        {
                                            if (!progress.Equals(SelectedTask.Progress) && (int)progress > (int)SelectedTask.Progress)
                                            {
                                                <option value="@progress">@progress</option>
                                            }
                                        }
                                    </InputSelect>
                                    @* <p>@ErrorMessage</p> *@
                                    @* <p>@SuccessMessage</p> *@
                                    <InputTextArea @bind-Value="Note.Content" class="form-control" placeholder="Comment"/>
                                    <button class="button-success col-12 my-1" @onclick="() => UpdateStatus()">Update</button>
                                </div>
                            </div>
                        </div>
                        
                    }
                    else
                    {
                        <!-- Growing Color spinnersr -->
                        <div class="spinner-grow text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                }
                else
                {
                    <TaskNoteSideBar Task="@SelectedTask"/>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div><!-- End Vertically centered Modal-->

@if(isLoading)
{
    <Loading />
}
else
{
    <div class="row">
        <div class="col-lg-9 col-md-6  col-sm-6 ">
            <h3>Tasks</h3>
        </div>
        @* <div class="col-lg-3 col-md-6  col-sm-6 "> *@
        @*     <button @onclick="HowAddTask" class="button-outlined col-12"  data-bs-toggle="modal" data-bs-target="#verticalycentered">Add Task</button> *@
        @* </div> *@
    </div>
<div class="row">
    <div class="col-lg-12 col-md-12">
        @if(AWTaskService.Objects is null)
        {
            <Loading />
        }
        <div class="row parent">
            <div class="col-12 ">
                @if (AWTaskService.Objects == null)
                {
                    <Loading/>
                }
                else if (AWTaskService.Objects.Count == 0)
                {
                    <p>No programs found.</p>
                }
                else
                {
                    <div class="card h-100">
                        <div class="card-body">
                    <h5 class="card-title col">Task list</h5>
                            
                            <table class="table table-hover datatable">
                                <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Name</th>
                                    <th scope="col">Due Date</th>
                                    <th scope="col">Progress</th>
                                    <th scope="col">Actions</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var context in FilteredTasks)
                                {
                                    <tr>
                                        <th scope="col">@context.Id.ToString()</th>
                                        <th scope="col">@context.ShortName</th>
                                        <th scope="col">@context.Due.ToString()</th>
                                        <th scope="col">@context.ProgressString</th>
                                        <th scope="col">
                                            <button @onclick="() => SelectTask(context)" class="button-outlined p-1 m-1" data-bs-toggle="modal" data-bs-target="#modalDialogScrollable">Details</button>
                                            <button @onclick="() => SelectNotes(context)" class="button-outlined p-1 m-1" data-bs-toggle="modal" data-bs-target="#modalDialogScrollable">Comments/Notes</button>
                                        </th>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
}





@code {
 
    NoteDto Note { get; set; }  = new();
    bool isDetails = true;
    Task SelectedTask { get; set; } = null;
    void SelectTask(Task task)
    {
        isDetails = true;
        SelectedTask = task;
        StateHasChanged();
    }
    async System.Threading.Tasks.Task Complete(Task task)
    {
        task.IsCompleted = true;
        await AWTaskService.Update(task);
        await AWTaskService.Get(true);
        StateHasChanged();
    }
    async System.Threading.Tasks.Task SelectNotes(Task task)
    {
        SelectedTask = task;
        /////
        isDetails = false;
        StateHasChanged();
    }
    async System.Threading.Tasks.Task Edit(Task task)
    {
        throw new NotImplementedException();
    }
    public bool AddTaskVisibility { get; set; } = false;
    public void HowAddTask()
    {
        AddTaskVisibility = true;
    }
    async System.Threading.Tasks.Task HideAddTask()
    {
        AddTaskVisibility = false;
        await AWTaskService.Get(true);
        OnInitialized();
    }
    public IQueryable<Task>? itemsQueryable;
    public string nameFilter = "";
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };


    IQueryable<Task> FilteredTasks
    {
        
        get
        {
            itemsQueryable = AWTaskService.Objects.AsQueryable();
            var filtered = itemsQueryable;

            if (!string.IsNullOrWhiteSpace(nameFilter))
            {
                filtered = filtered.Where(p => p.Name.Contains(nameFilter));
            }
            return filtered;
        }
    }
    public bool isLoading { get; set; } = true;

    protected override async void OnInitialized()
    {
        await AWTaskService.Get();
        await ProblemService.Get();
        StateHasChanged();


        isLoading =!(
            AWTaskService.Objects is not null
            // @* SchoolService.Objects is not null &&  *@
            // @* DepartmentService.Objects is not null &&  *@
            // @* NoteService.Objects is not null && *@
            // @* UserService.Objects is not null *@
            );
        StateHasChanged();
    }
    async System.Threading.Tasks.Task UpdateStatus()
    {
        if(!(Note.Content.Length >0))
            ErrorMessage = "Please enter a comment";
        else
        {
            Note.Name = SelectedTask.Progress.ToString();
            Note.TaskId = SelectedTask.Id;
            // Note.UserId = U
            Note.ProgramId = SelectedTask.ProblemId;
            Note.UserId = int.Parse((
                await AuthenticationStateProvider
                    .GetAuthenticationStateAsync())
                .User
                .Claims
                .First(claim=> claim.Type == ClaimTypes.Sid)
                .Value);
            
            ErrorMessage = "";

            @* await NoteService.Create(Note); *@
            SelectedTask.Problem.Program = ProblemService.Objects.First(x=>x.Id == SelectedTask.Problem.AWProgramId).Program;
            SelectedTask.Notes.Add(Note);
            await TaskService.Update(SelectedTask);
            SuccessMessage = "Status Updated";
            StateHasChanged();
        }
    }
    
    public string ErrorMessage { get; set; } = "";
    public string SuccessMessage { get; set; } = "";

}
