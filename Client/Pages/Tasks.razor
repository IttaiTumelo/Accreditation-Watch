@page "/tasks"
@inject IAWTaskService AWTaskService   
@inject IProblemService ProblemService



<!-- Vertically centered Modal -->
<div class="modal fade" id="verticalycentered" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Vertically Centered</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <AddTask  OnClose="HideAddTask" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div><!-- End Vertically centered Modal-->

<!-- Vertically centered Modal -->
<div class="modal fade" id="modalDialogScrollable" tabindex="-1">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Vertically Centered</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (isDetails)
                {
                    <TaskDetails Task="@SelectedTask"/>
                }
                else
                {
                    <TaskNoteSideBar Task="@SelectedTask"/>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div><!-- End Vertically centered Modal-->

@if(isLoading)
{
    <Loading />
}
else
{
    <div class="row">
        <div class="col-lg-9 col-md-6  col-sm-6 ">
            <h3>Tasks</h3>
        </div>
        <div class="col-lg-3 col-md-6  col-sm-6 ">
            <button @onclick="HowAddTask" class="button-outlined col-12"  data-bs-toggle="modal" data-bs-target="#verticalycentered">Add Task</button>
        </div>
    </div>
<div class="row">
    <div class="col-lg-12 col-md-12">
        @if(AWTaskService.Objects is null)
        {
            <Loading />
        }
        
        
        
        
        
        <div class="row parent">
            <div class="col-12 ">
                @if (AWTaskService.Objects == null)
                {
                    <Loading/>
                }
                else if (AWTaskService.Objects.Count == 0)
                {
                    <p>No programs found.</p>
                }
                else
                {

                    <div class="card h-100">
                        <div class="card-body">
                    <h5 class="card-title col">Task list</h5>
                            
                            <table class="table table-hover datatable">
                                <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Name</th>
                                    <th scope="col">Due Date</th>
                                    <th scope="col">Progress</th>
                                    <th scope="col">Actions</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var context in FilteredTasks)
                                {


                                    <tr>
                                        <th scope="col">@context.Id.ToString()</th>
                                        <th scope="col">@context.ShortName</th>
                                        <th scope="col">@context.Due.ToString()</th>
                                        <th scope="col">@context.ProgressString</th>
                                        <th scope="col">
                                            <button @onclick="() => SelectTask(context)" class="button-outlined p-1 m-1" data-bs-toggle="modal" data-bs-target="#modalDialogScrollable">Details</button>
                                            <button @onclick="() => SelectNotes(context)" class="button-outlined p-1 m-1" data-bs-toggle="modal" data-bs-target="#modalDialogScrollable">Comments/Notes</button>


                                        </th>
                                    </tr>

                                }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
}





@code {
    bool isDetails = true;
    public AWTask? SelectedTask { get; set; }
    void SelectTask(AWTask task)
    {
        isDetails = true;
        SelectedTask = task;
        StateHasChanged();
    }
    async Task Complete(AWTask task)
    {
        task.IsCompleted = true;
        await AWTaskService.Update(task);
        await AWTaskService.Get(true);
        StateHasChanged();
    }
    async Task SelectNotes(AWTask task)
    {
        SelectedTask = task;
        isDetails = false;
        StateHasChanged();
    }
    async Task Edit(AWTask task)
    {
        throw new NotImplementedException();
    }
    public bool AddTaskVisibility { get; set; } = false;
    public void HowAddTask()
    {
        AddTaskVisibility = true;
    }
    async Task HideAddTask()
    {
        AddTaskVisibility = false;
        await AWTaskService.Get(true);
        OnInitialized();
    }
    public IQueryable<AWTask>? itemsQueryable;
    public string nameFilter = "";
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };


    IQueryable<AWTask> FilteredTasks
    {
        
        get
        {
            itemsQueryable = AWTaskService.Objects.AsQueryable();
            var filtered = itemsQueryable;

            if (!string.IsNullOrWhiteSpace(nameFilter))
            {
                filtered = filtered.Where(p => p.Name.Contains(nameFilter));
            }
            return filtered;
        }
    }
    public bool isLoading { get; set; } = true;

    protected override async void OnInitialized()
    {
        await AWTaskService.Get();
        //await ProblemService.Get();
        StateHasChanged();


        isLoading =!(
            AWTaskService.Objects is not null
            // @* SchoolService.Objects is not null &&  *@
            // @* DepartmentService.Objects is not null &&  *@
            // @* NoteService.Objects is not null && *@
            // @* UserService.Objects is not null *@
            );
        StateHasChanged();
    }

}
