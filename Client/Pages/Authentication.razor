@inject NavigationManager NavManager;
@inject IAuthService AuthService;
@inject IUserService UserService
@page "/log-in"
@using Microsoft.IdentityModel.Tokens
<style>
    .hide- {
        display: none;
    }
</style>

@if (isLoading)
{
    <Loading/>
}
else
{
        <div class="row">
        <div class="col-lg-12">
            <section class="vh-100" style="background-color: #0000;">
                <div class="container py-5 h-100">
                    <div class="row d-flex justify-content-center align-items-center h-100">
                        <div class="col col-xl-10">
                            <div class="" style="border-radius: 1rem;">
                                <div class="row g-0">
                                    <div class="col-md-12 col-lg-12 d-flex align-items-center">
                                        <div class="card-body p-4 p-lg-5 text-black">
                                            <span class="text-danger">@ErrorMessage</span>
                                            <EditForm Model="user" OnSubmit="HundleSubmit">
                                                <div class="d-flex align-items-center mb-3 pb-1">
                                                    <span class="h1 fw-bold mb-0">CBU ACCREDITATION WATCH</span>
                                                </div>

                                                
                                                    <div class="form-outline mb-4">
                                                        @*<InputText @bind-Value="user.UserName" id="form2Example" type="email" class="form-control form-control-lg" />*@
                                                        <InputText id="form2Example" type="text" class="form-control form-control-lg" @bind-Value="user.Email"/>
                                                        <label class="form-label" for="form2Example">Email address/ user ID</label>
                                                    </div>
                                                    <div class="form-outline mb-4">
                                                        <InputText type="password" id="form2Example17" class="form-control form-control-lg" @bind-Value="user.Password"/>
                                                        <label class="form-label" for="form2Example27">Password</label>
                                                    </div>
                                                <div class="pt-1 mb-4">
                                                    @* @if (!hasUsers) *@
                                                    @* { *@
                                                    @*     <button class="btn btn-dark btn-lg btn-block"  @onclick="CreateAdmin">Create Admin Account</button> *@
                                                    @* } *@
                                                    @* else *@
                                                    @* { *@
                                                        <button class="btn btn-dark btn-lg btn-block" type="submit" @IsDisabled>Login</button>
                                                        @if (isLoading)
                                                        {
                                                            <Loading/>
                                                        }
                                                    @* } *@
                                                </div>

                                            </EditForm>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>

    </div>

}
    <!------SIgn in page-------->
-
@code {
    private bool isLoading = true;
    Boolean hasUsers = false;
    public string IsDisabled => isLoading ? "disabled" : "";
    public string Visible = "hide-";
    public string ErrorMessage = "";
    protected override async void OnInitialized()
    {
        hasUsers = await UserService.CheckUsers();
        isLoading = false;
        StateHasChanged();
    }

    public UserLoginDto user = new();
    public void gtSignUp() => NavManager.NavigateTo("/sign-up");

    public async Task HundleSubmit()
    {
        StateHasChanged();
        try
        {
            await AuthService.LogIn(user);
            NavManager.NavigateTo("dashboard");
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            StateHasChanged();
        }
    }
    public async Task GoToDashboard()
    {
        NavManager.NavigateTo("dashboard");
        await Task.Delay(100);
    }

    public async Task CreateAdmin()
    {
        UserDto newAdmin = new()
        {
            Email = user.Email,
            Password = user.Password,
            Name = string.Empty,
            Role = Role.Coordinator,
        };
        await UserService.Create(newAdmin);

    }

}
