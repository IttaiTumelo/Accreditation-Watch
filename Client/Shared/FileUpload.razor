@page "/upload"
@inject ISchoolService SchoolService
@inject IDepartmentService DepartmentService
@inject IProgramService ProgramService
@inject IAccrediteStatusService AccrediteStatusService



<style>
    /* Use a monospace font for the table */
    table {
        font-family: "Courier New", Courier, monospace;
    }

    /* Add borders and padding to the table cells */
    td {
        border: 1px solid black;
        padding: 5px;
    }

    /* Add a background color and bold text to the first row */
    tr:first-child {
        background-color: lightgray;
        font-weight: bold;
    }

    /* Add a background color and text alignment to the first column */
    tr td:first-child {
        background-color: lightgray;
        text-align: center;
    }

    /* Add some spacing between the table and the page margins */
    table {
        margin: 20px;
    }   
</style>
<h1>Upload Excel File</h1>
<h1 class="bg-danger">@ErrorMessage</h1>
<h3>@Title</h3>



<div id="@Visibility" class="d-flex justify-content-center align-items-center">
        <div style="background-color : #fff; border-radius: 10px; width: 1000px" class="p-5">
          <div class="row">
                      <h3 class="col">Add User</h3>
                      <div class="col-1"><button @onclick="()=>Close()" class=" btn-close btn-danger"></button></div>
          </div>
            <p class="text-success">@SuccessMessage</p>
        <span class="text-danger">@ErrorMessage</span>
        <div id="@UpdatingResults" class="d-flex justify-content-center align-items-center">
            <div class="loading-section @StyleOne() p-5 " style="width:50%; background-color : #fff; border-radius: 10px;">
                <p>Processes Document ...</p>
                <div class="progress-container">
                    <div class="progress-bar" style="@_progressBarStyle"></div>
                </div>
                <p class="col">@jobDiscription</p>
            </div>
        </div>
        </div>
</div>

<InputFile id="fileInput" OnChange="UploadFile" />

@if (dataTable != null)
{
    <h2>Data</h2>
    <button @onclick="UploadPrograms">Upload Programs</button>
    <table class="table">
        <thead>
            <tr>
                @foreach (DataColumn column in dataTable.Columns)
                {
                    <th>@column.ColumnName</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (DataRow row in dataTable.Rows)
            {
                <tr>
                    @foreach (var item in row.ItemArray)
                    {
                        <td>@item?.ToString()</td>
                    }
                </tr>
            }
        </tbody>
    </table>
    
}

@code {

    public bool IsVisible { get; set; } = false;
    public string Visibility => IsVisible ? "show-overlay" : "hide-overlay";
    public string SuccessMessage { get; set; } = "";
    public void Close()
    {
        IsVisible = false;
    }
    public string ErrorMessage { get; set; } = "";



    int Progress { get; set; } = 1;
    int Total { get; set; } = 100;
    List<School> Schools { get; set; }
    List<Department> Departments { get; set; }
    List<AccrediteStatus> AccrediteStatuses { get; set; }
    DataTable dataTable;

    protected override async void OnInitialized()
    {
        Schools = await SchoolService.Get();
        Departments = await DepartmentService.Get();
        AccrediteStatuses = await AccrediteStatusService.Get();
        StateHasChanged();

    }

    async Task UploadFile(InputFileChangeEventArgs e)
    {

        try
        {
            var stream = e.File.OpenReadStream();
            var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;

            using (var reader = ExcelReaderFactory.CreateReader(memoryStream))
            {
                var result = reader.AsDataSet();
                dataTable = result.Tables[0];
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading file: {ex.Message}");
        }
    }

    async Task UploadPrograms()
    {
        IsVisible = true;
        List<CreateDepartmentDto> departments = new(); 
        List<CreateProgramDto> programs = new();
        List<CreateSchoolDto> schools = new();
        //Stage One Extraxt School from the table
        for (Total = dataTable.Rows.Count, Progress = 0; Progress < Total; Progress++, StateHasChanged())
        {
            var schoolName = dataTable?.Rows[Progress]?.ItemArray[2]?.ToString();
            if(schoolName is null)
            {
                ErrorMessage = "Failed to extract School name";
                StateHasChanged();
                await Task.Delay(2000);
                continue;
            }
            if (schools.FirstOrDefault(x => x.Name.Equals(schoolName)) is null)
                schools.Add(new() { Name = schoolName});
            jobDiscription = $"Stage 1 : Loading Schools from Excel Sheet: on  {dataTable.Rows[Progress].ItemArray[1].ToString()}";
            UpdateLoading();

        }

        //Stage Two, Upload schools to the database
        for (Total = schools.Count, Progress = 0; Progress < Total; Progress++, StateHasChanged())
        {
            jobDiscription = $"Stage 2 : Uploading Schools from Excel Sheet: on  {schools[Progress].Name} . school {Progress+1} of {schools.Count}";
            var result = await SchoolService.Create(schools[Progress]);
            UpdateLoading();
        }
        _progressBarStyle = $"width: {(Progress * 100) / Total}%; transition: width 0.3s ease-in-out;";
        OnInitialized();
        //Stage three
        Schools = await SchoolService.Get(true);
        for (Total = dataTable.Rows.Count, Progress = 0; Progress < Total; Progress++, StateHasChanged())
        {
            var departmentName = dataTable?.Rows[Progress]?.ItemArray[1]?.ToString();
            var schoolName = dataTable?.Rows[Progress]?.ItemArray[2]?.ToString();
            var school = Schools.FirstOrDefault(x => x.Name.Equals(schoolName));
            if (departmentName is null)
            {
                ErrorMessage = "Failed to extract department name";
                StateHasChanged();
                await Task.Delay(2000);
                continue;
            }
            if (school is null)
            {
                ErrorMessage = $"Failed find school with  name {schoolName}";
                StateHasChanged();
                await Task.Delay(2000);
                continue;
            }
            if (departments.FirstOrDefault(x => x.Name.Equals(departmentName)) is null)
                departments.Add(new() { 
                    Name = departmentName,
                    SchoolId = school.Id,
                });
            jobDiscription = $"Stage 3 : Loading Deaprtment from Excel Sheet: on  {dataTable.Rows[Progress].ItemArray[2].ToString()}";
            UpdateLoading();

        }
        //Stage four, Upload departments to the database
        for (Total = departments.Count, Progress = 0; Progress < Total; Progress++, StateHasChanged())
        {
            jobDiscription = $"Stage four : Uploading Departments from Excel Sheet: on  {departments[Progress].Name} . department {Progress + 1} of {departments.Count}";
            var result = await DepartmentService.Create(departments[Progress]);
            UpdateLoading();
        }
        Departments = await DepartmentService.Get(true);
        AccrediteStatuses = await AccrediteStatusService.Get(true);

        //Stage five Extraxt programs from the table
        for (Total = dataTable.Rows.Count, Progress = 0; Progress < Total; Progress++, StateHasChanged())
        {
            var programName = dataTable?.Rows[Progress]?.ItemArray[0]?.ToString();
            if (programName is null)
            {
                ErrorMessage = "Failed to extract program name";
                StateHasChanged();
                await Task.Delay(2000);
                continue;
            }
            var departmentName = dataTable?.Rows[Progress]?.ItemArray[1]?.ToString();
            
            var dep = Departments.FirstOrDefault(x => x.Name.Equals(departmentName));
            if(dep is null)
            {
                ErrorMessage = "Failed to extract department name during program progress";
                StateHasChanged();
                await Task.Delay(2000);
                continue;
            }
            var accreditStatus = AccrediteStatuses.FirstOrDefault(x => x.Name.Equals(dataTable?.Rows[Progress]?.ItemArray[3]?.ToString()));
            if (accreditStatus is null)
            {
                ErrorMessage = "Failed to extract accreditStatus from db";
                StateHasChanged();
                await Task.Delay(2000);
                continue;
            }
            if (schools.FirstOrDefault(x => x.Name.Equals(programName)) is null)
                programs.Add(new() 
                { 
                    Name = programName,
                    DepartmentId = dep.Id,
                    AccrediteStatusId = accreditStatus.Id, /////
                    ValidFrom = DateTime.Parse(dataTable.Rows[Progress].ItemArray[4].ToString()),
                    ValidTo = DateTime.Parse(dataTable.Rows[Progress].ItemArray[5].ToString()),
                });
            else
            {
                ErrorMessage = "duplicate prog name";
                StateHasChanged();
                await Task.Delay(2000);
                continue;
            }
            jobDiscription = $"Stage 5 : Loading program from Excel Sheet: on  {dataTable.Rows[Progress].ItemArray[0].ToString()}";
            await ProgramService.Get(true);
            UpdateLoading();

        }

        //Stage six, Upload departments to the database
        for (Total = programs.Count, Progress = 0; Progress < Total; Progress++, StateHasChanged())
        {
            jobDiscription = $"Stage 6 : Uploading progras from Excel Sheet: on  {programs[Progress].Name} . program {Progress + 1} of {programs.Count}";
            var result = await ProgramService.Create(programs[Progress]);
            UpdateLoading();
        }
        await Task.Delay(1000);
        IsVisible = false;
    }
}



<style>
    .progress-container {
        width: 100%;
        height: 10px;
        background-color: #f5f5f5;
        border-radius: 10px;
        overflow: hidden;
    }

    .progress-bar {
        height: 100%;
        background-color: #4CAF50;
        border-radius: 10px;
    }
</style>





@code {
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string UpdatingResults { get; set; }
    [Parameter]
    public string jobDiscription { get; set; }
    //[Parameter]
    //public Double Progress { get; set; }
    //[Parameter]
    //public int Total { get; set; }

    public bool loading = false;
    public string StyleOne() => loading ? _loadingStyle : _notLoadingStyle;
    public double progress = 0;
    public string _loadingStyle = "display: flex; align-items: center; justify-content: center;";
    public string _notLoadingStyle = "display: none;";
    public string _progressBarStyle = "width: 0%; transition: width 1s ease-in-out;";

    //protected override void OnInitialized()
    //{
    //    _progressBarStyle = $"width: {(Progress * 100) / Total}%; transition: width 0.3s ease-in-out;";
    //    StateHasChanged();
    //}

    public void add()
    {
        Progress++;
    }

    public void UpdateLoading()
    {
        _progressBarStyle = $"width: {(Progress * 100) / Total}%; transition: width 0.3s ease-in-out;";
        StateHasChanged();
    }

}
