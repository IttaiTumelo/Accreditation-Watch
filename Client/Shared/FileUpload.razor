@page "/upload"
@inject ISchoolService SchoolService
@inject IDepartmentService DepartmentService
@inject IProgramService ProgramService
@inject IAccrediteStatusService AccrediteStatusService
<div class="@Visibility">
    <div class="progress mt-3" style="height: 25px;">
        
        <div class="progress-bar progress-bar-striped bg-successjustify-content-around" role="progressbar" style="width: @percentage%" aria-valuenow="@percentage" aria-valuemin="0" aria-valuemax="100">
        </div>
        
    </div>
            <p class="text-center">@percentage% -- @jobDiscription</p>
    <div class="progress mt-3" style="height: 25px;">
            
        <div class="progress-bar progress-bar-striped bg-successjustify-content-around" role="progressbar" style="width: @percentage2%" aria-valuenow="@percentage2" aria-valuemin="0" aria-valuemax="100">
        </div>
    </div>
            <p class="text-center">@percentage2%</p>
    
</div>

<h1>Upload Excel File</h1>
<h1 class="bg-danger">@ErrorMessage</h1>
<h3>@Title</h3>

@* <div id="@Visibility" class="d-flex justify-content-center align-items-center"> *@
@*         <div style="background-color : #fff; border-radius: 10px; width: 1000px" class="p-5"> *@
@*           <div class="row"> *@
@*                       <h3 class="col">Add User</h3> *@
@*                       <div class="col-1"><button @onclick="()=>Close()" class=" btn-close btn-danger"></button></div> *@
@*           </div> *@
@*             <p class="text-success">@SuccessMessage</p> *@
@*         <span class="text-danger">@ErrorMessage</span> *@
@*         <div id="@UpdatingResults" class="d-flex justify-content-center align-items-center"> *@
@*             <div class="loading-section @StyleOne() p-5 " style="width:50%; background-color : #fff; border-radius: 10px;"> *@
@*                 <p>Processes Document ...</p> *@
@*                 <div class="progress-container"> *@
@*                     <div class="progress-bar" style="@_progressBarStyle"></div> *@
@*                 </div> *@
@*                 <p class="col">@jobDiscription</p> *@
@*             </div> *@
@*         </div> *@
@*         </div> *@
@* </div> *@

<InputFile id="fileInput" OnChange="UploadFile" class="button-outlined" />

@if (dataTable != null)
{
    <h2>Data</h2>
    <button @onclick="UploadPrograms" class="button-success">Upload Programs</button>
    <table class="table">
        <thead>
            <tr>
                @foreach (var column in dataTable.Rows[0].ItemArray)
                {
                    <th>@column?.ToString()</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (DataRow row in dataTable.Rows)
            {
                if (dataTable.Rows.IndexOf(row)==0)
                {
                    continue;
                }
                <tr>
                    @foreach (var item in row.ItemArray)
                    {
                        <td>@item?.ToString()</td>
                    }
                </tr>
            }
        </tbody>
    </table>
    
}

@code {

    public bool IsVisible { get; set; } = false;
    public string Visibility => IsVisible ? "" : "d-none";

    public string SuccessMessage { get; set; } = "";
    public void Close()
    {
        IsVisible = false;
    }
    public string ErrorMessage { get; set; } = "";



    int Progress { get; set; } = 1;
    int ProgressX { get; set; } = 0;
    int Total { get; set; } = 1;
    int TotalX { get; set; } = 1;
    int stage { get; set; } = 0;
    int stages { get; set; } = 6;
    // List<School> Schools { get; set; }
    // List<Department> Departments { get; set; }
    // List<AccreditStatus> AccrediteStatuses { get; set; }
    DataTable dataTable;

    protected override async void OnInitialized()
    {
        await SchoolService.Get();
        await DepartmentService.Get();
        await AccrediteStatusService.Get();
        StateHasChanged();

    }

    async Task UploadFile(InputFileChangeEventArgs e)
    {

        try
        {
            var stream = e.File.OpenReadStream();
            var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;

            using (var reader = ExcelReaderFactory.CreateReader(memoryStream))
            {
                var result = reader.AsDataSet();
                dataTable = result.Tables[0];
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading file: {ex.Message}");
        }
    }

    async Task UploadPrograms()
    {
        
        IsVisible = true;
        List<CreateDepartmentDto> departments = new(); 
        List<CreateProgramDto> programs = new();
        List<CreateSchoolDto> schools = new();
        //Stage One Extraxt School from the table
        stage = 1;

        for (TotalX = Total = dataTable.Rows.Count, Progress =1; Progress < Total; Progress++, ProgressX++, StateHasChanged())
        {
            var schoolName = dataTable?.Rows[Progress]?.ItemArray[0]?.ToString();
            var schoolEmail = dataTable?.Rows[Progress]?.ItemArray[1]?.ToString();
            if(schoolName is null || schoolEmail is null)
            {
                ErrorMessage = "Failed to extract School name or email";
                StateHasChanged();
                await Task.Delay(10000);
                continue;
            }
            if (schools.FirstOrDefault(x => x.Name.Equals(schoolName)) is null)
                schools.Add(new() { Name = schoolName, Email = schoolEmail});
            jobDiscription = $"Stage 1 : Loading Schools from Excel Sheet: on  {dataTable.Rows[Progress].ItemArray[0].ToString()}";
            UpdateLoading();

        }
        stage = 2;

        //Stage Two, Upload schools to the database
        for (TotalX += Total = schools.Count, Progress = 0; Progress < Total; Progress++, ProgressX++, StateHasChanged())
        {
            jobDiscription = $"Stage 2 : Uploading Schools from Excel Sheet: on  {schools[Progress].Name} . school {Progress+1} of {schools.Count}";
            var result = await SchoolService.Create(schools[Progress]);
            UpdateLoading();
        }

        _progressBarStyle = $"width: {(Progress * 100) / Total}%; transition: width 0.3s ease-in-out;";
        OnInitialized();
        await Task.Delay(1000);
        //Stage three
        stage = 3;

        await SchoolService.Get(true);
        for (TotalX += Total = dataTable.Rows.Count, Progress = 1; Progress < Total; Progress++, ProgressX++, StateHasChanged())
        {
            var departmentName = dataTable?.Rows[Progress]?.ItemArray[2]?.ToString();
            var departmentEmail = dataTable?.Rows[Progress]?.ItemArray[3]?.ToString();
            var schoolName = dataTable?.Rows[Progress]?.ItemArray[0]?.ToString();
            var school = SchoolService.Objects.FirstOrDefault(x => x.Name.ToLower().Equals(schoolName.ToLower()));
            if (departmentName is null || departmentEmail is null)
            {
                ErrorMessage = "Failed to extract department name";
                StateHasChanged();
                await Task.Delay(10000);
                continue;
            }
            if (school is null)
            {
                ErrorMessage = $"Failed find school with  name {schoolName}";
                StateHasChanged();
                await Task.Delay(10000);
                continue;
            }
            if (departments.FirstOrDefault(x => x.Name.Equals(departmentName)) is null)
                departments.Add(new() { 
                    Name = departmentName,
                    Email = departmentEmail,
                    SchoolId = school.Id,
                });
            jobDiscription = $"Stage 3 : Loading Deaprtment from Excel Sheet: on  {dataTable.Rows[Progress].ItemArray[2].ToString()}";
            UpdateLoading();

        }
        stage = 4;

        //Stage four, Upload departments to the database
        for (TotalX += Total = departments.Count, Progress = 0; Progress < Total; Progress++, ProgressX++, StateHasChanged())
        {
            jobDiscription = $"Stage four : Uploading Departments from Excel Sheet: on  {departments[Progress].Name} . department {Progress + 1} of {departments.Count}";
            var result = await DepartmentService.Create(departments[Progress]);
            UpdateLoading();
        }
        await DepartmentService.Get(true);
        await AccrediteStatusService.Get(true);

        //Stage five Extraxt programs from the table
        stage = 5;

        for (TotalX += Total = dataTable.Rows.Count, Progress = 1; Progress < Total; Progress++, ProgressX++, StateHasChanged())
        {
            var programName = dataTable?.Rows[Progress]?.ItemArray[4]?.ToString();
            if (programName is null)
            {
                ErrorMessage = "Failed to extract program name";
                StateHasChanged();
                await Task.Delay(10000);
                continue;
            }
            
            var departmentName = dataTable?.Rows[Progress]?.ItemArray[2]?.ToString();
            
            var dep = DepartmentService.Objects.FirstOrDefault(x => x.Name.ToLower().Equals(departmentName.ToLower()));
            if(dep is null)
            {
                ErrorMessage = "Failed to extract department name during program progress";
                StateHasChanged();
                await Task.Delay(10000);
                continue;
            }
            int accreditStatusIdFromFile = int.Parse(dataTable?.Rows[Progress]?.ItemArray[5]?.ToString());
            var accreditStatus = AccrediteStatusService.Objects.FirstOrDefault(x => x.Id == accreditStatusIdFromFile);
            if (accreditStatus is null)
            {
                ErrorMessage = "Failed to extract accreditStatus from db";
                StateHasChanged();
                await Task.Delay(10000);
                continue;
            }
            if (programs.FirstOrDefault(x => x.Name.Equals(programName)) is null)
                programs.Add(new() 
                { 
                    Name = programName,
                    DepartmentId = dep.Id,
                    AccreditStatusId = accreditStatus.Id, /////
                    ValidFrom = DateTime.Parse(dataTable.Rows[Progress].ItemArray[6].ToString()),
                    ValidTo = DateTime.Parse(dataTable.Rows[Progress].ItemArray[7].ToString()),
                });
            else
            {
                ErrorMessage = "duplicate prog name";
                StateHasChanged();
                await Task.Delay(10000);
                continue;
            }
            jobDiscription = $"Stage 5 : Loading program from Excel Sheet: on  {dataTable.Rows[Progress].ItemArray[4].ToString()}";
            await ProgramService.Get(true);
            UpdateLoading();

        }

        //Stage six, Upload departments to the database
        stage = 6;

        for (TotalX += Total = programs.Count, Progress = 0; Progress < Total; Progress++, ProgressX++, StateHasChanged())
        {
            jobDiscription = $"Stage 6 : Uploading progras from Excel Sheet: on  {programs[Progress].Name} . program {Progress + 1} of {programs.Count}";
            var result = await ProgramService.Create(programs[Progress]);
            UpdateLoading();
        }
        ProgressX = TotalX;
        UpdateLoading();

        await Task.Delay(1000);
        IsVisible = false;
    }
}






@code {
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string UpdatingResults { get; set; }
    [Parameter]
    public string jobDiscription { get; set; }
    //[Parameter]
    //public Double Progress { get; set; }
    //[Parameter]
    //public int Total { get; set; }

    public bool loading = false;
    public string StyleOne() => loading ? _loadingStyle : _notLoadingStyle;
    public double progress = 0;
    public string _loadingStyle = "display: flex; align-items: center; justify-content: center;";
    public string _notLoadingStyle = "display: none;";
    public string _progressBarStyle = "width: 0%; transition: width 1s ease-in-out;";

    //protected override void OnInitialized()
    //{
    //    _progressBarStyle = $"width: {(Progress * 100) / Total}%; transition: width 0.3s ease-in-out;";
    //    StateHasChanged();
    //}

    public void add()
    {
        Progress++;
    }
    int percentage = 0;
    int percentage2 = 0;
    
    public void UpdateLoading()
    {
        percentage = ((Progress * 100) / (Total));
        percentage2 = ((stage * 100) / (stages));
        _progressBarStyle = $"width: {(Progress * 100) / Total}%; transition: width 0.3s ease-in-out;";
        StateHasChanged();
    }

}
