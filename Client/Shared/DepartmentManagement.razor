@page "/departments"
@inject IDepartmentService DepartmentService
@inject ISchoolService SchoolService
@inject IProgramService ProgramService


<!-- Modal Dialog Scrollable -->
<div class="modal fade" id="modalDialogScrollable" tabindex="-1">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@SelectedDepartment?.Name</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (ViewDepartmentVisibility)
                {
                    <DepartmentDetailsSIdeBar DepartmentId="SelectedDepartment.Id"/>
                }
                else
                {
                    <p>No school selected</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div><!-- End Modal Dialog Scrollable-->



              <!-- Vertically centered Modal -->

<div class="modal fade" id="createdepartment" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create department</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (Schools is not null)
                {
                    <EditForm Model="newDepartment" OnSubmit="Hundle">
                        <InputText @bind-Value="newDepartment.Name" class="form-control my-1" placeholder="Department name"/>
                        <InputText @bind-Value="newDepartment.Email" class="form-control my-1" placeholder="Department email"/>
                        <InputSelect @bind-Value="SchoolId" class="form-control my-1" placeholder="School">
                            <option value="0" disabled="">Select School</option>
                            @foreach (var school in Schools)
                            {
                                <option value="@school.Id">@school.Name</option>
                            }
                        </InputSelect>
                    </EditForm>
                }
                else
                {
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div><!-- End Vertically centered Modal-->




<div class="col-12 ">
@if (DepartmentService.Objects == null)
    {
        <Loading />
    }
    else if (DepartmentService.Objects.Count == 0)
    {
        <p>No programs found.</p>
    }
    else
    {
        <div class="d-flex justify-content-between">
            @* <div class="col-3"> *@
                <h5 class="card-title">Department list</h5>
            @* </div> *@
            @* <div class="col-3 justify-content-end"> *@
            <div class="my-2">
                <button @onclick="() => NewDepartment()" class="button-outlined" data-bs-toggle="modal" data-bs-target="#createdepartment">New Department</button>
            </div>
            @* </div> *@
        </div>
        <table class="table table-hover datatable ">
            <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Name</th>
                <th scope="col">Email</th>
                <th scope="col">Number of Programs</th>
                <th scope="col">Actions</th>
            </tr>
            </thead>
            <tbody class="grid-max-height">
            @foreach (var context in itemsQueryable)
            {
                <tr>
                    <th>@context.Id.ToString()</th>
                    <th>@context.Name</th>
                    <th>@context.Email</th>
                    <th>@context.Programs.Count.ToString()</th>
                    <th>
                        <button class="button-outlined  p-1 m-1" @onclick="()=>Details(context)"  data-bs-toggle="modal" data-bs-target="#modalDialogScrollable" >Details</button>
                    </th>
                </tr>
            }
            </tbody>
        </table>
    }
</div>




@code {
    public List<School> Schools { get; set; }
    public bool ViewDepartmentVisibility { get; set; } = false;
    public Department SelectedDepartment { get; set; }
    public string nameFilter;
    public bool NewDepartmentVisibility { get; set; } = false;
    PaginationState pagination = new PaginationState { ItemsPerPage = 30 };
    protected override async Task OnInitializedAsync()
    {
        await DepartmentService.Get();
        Schools = await SchoolService.Get();
        itemsQueryable = DepartmentService.Objects.AsQueryable();
        StateHasChanged();
    }
    IQueryable<Department>? itemsQueryable;
    IQueryable<Department> FilteredSchools
    {
        get
        {
            var result = itemsQueryable?.Where(c => c.Id <= 2000);
            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c => c.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            return result;
        }
    }
    async Task Delete(Department department)
    {
        await DepartmentService.Delete(department.Id);
        itemsQueryable = DepartmentService.Objects.AsQueryable();
        StateHasChanged();
    }
    Task NewDepartment()
    {
        NewDepartmentVisibility = NewDepartmentVisibility ? false : true;
        StateHasChanged();
        return Task.CompletedTask;
    }
    async Task Details(Department department)
    {
        ViewDepartmentVisibility = ViewDepartmentVisibility ? true : true;
        SelectedDepartment = department;
        StateHasChanged();
    }
    
    
    public CreateDepartmentDto newDepartment { get; set; } = new();
    public int SchoolId { get; set; }
    [Parameter]
    public bool IsVisible { get; set; } = false;
    public string Visibility => IsVisible ? "show-overlay" : "hide-overlay";
    Task Close()
    {
        IsVisible = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task Hundle()
    {
    //newDepartment.Programs = new();
    //newDepartment.School = Schools.First(x => x.Id == SchoolId);
        newDepartment.SchoolId = Schools.First(x => x.Id == SchoolId).Id;
        var request = DepartmentService.Create(newDepartment);

        IsVisible = false;
        StateHasChanged();
        return Task.CompletedTask;
    }
}