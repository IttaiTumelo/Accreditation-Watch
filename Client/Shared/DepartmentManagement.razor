@page "/departments"
@inject IDepartmentService DepartmentService
@inject IProgramService ProgramService

<div class="row">
    <div class="col-8">
        <h3>Departments</h3>
    </div>
    <div class="col-4">
        <div class="row">
            <button @onclick="() => NewDepartment()" class="button-outlined col mx-1">New Department</button>
        </div>
    </div>
</div>
@if (DepartmentService.Objects == null)
{
    <Loading />
}
else if (DepartmentService.Objects.Count == 0)
{
    <p>No programs found.</p>
}
else
{
    <div class="row">
            <div class="col-9">
                <QuickGrid Items="itemsQueryable"  Theme="default" Virtualize="true" Pagination="pagination">
                    <PropertyColumn Property="p => p.Id" Sortable="true" />
                    <PropertyColumn Property="p => p.ShortName" Sortable="true" />
                    <PropertyColumn Property="p => p.Programs.Count" Sortable="true" Title="Programs" />
                    <TemplateColumn Title="Actions">
                        <button class="button-outlined  p-1 m-1" @onclick="()=>Details(context)" >Details</button>
                    </TemplateColumn>
                </QuickGrid>
                <Paginator Value="@pagination" />
            </div>

            <div class="col-3">
                @if(ViewDepartmentVisibility)
                {
                    <DepartmentDetailsSIdeBar DepartmentId="SelectedDepartmentId" />
                }
            </div>
        </div>


}
<NewDepartment IsVisible="@NewDepartmentVisibility" />

@code {
    public bool ViewDepartmentVisibility { get; set; } = false;
    public int SelectedDepartmentId { get; set; }
    public string nameFilter;
    public bool NewDepartmentVisibility { get; set; } = false;
    PaginationState pagination = new PaginationState { ItemsPerPage = 30 };
    protected override async Task OnInitializedAsync()
    {
        await DepartmentService.Get();
        itemsQueryable = DepartmentService.Objects.AsQueryable();
    }
    IQueryable<Department>? itemsQueryable;
    IQueryable<Department> FilteredSchools
    {
        get
        {
            var result = itemsQueryable?.Where(c => c.Id <= 2000);
            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c => c.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            return result;
        }
    }
    async Task Delete(Department department)
    {
        await DepartmentService.Delete(department.Id);
        itemsQueryable = DepartmentService.Objects.AsQueryable();
        StateHasChanged();
    }
    Task NewDepartment()
    {
        NewDepartmentVisibility = NewDepartmentVisibility ? false : true;
        StateHasChanged();
        return Task.CompletedTask;
    }
    async Task Details(Department department)
    {
        ViewDepartmentVisibility = ViewDepartmentVisibility ? true : true;
        SelectedDepartmentId = department.Id;
        StateHasChanged();
    }
}