@page "/school"
@inject ISchoolService SchoolService
@inject IProgramService ProgramServices
@inject IDepartmentService DepartmentService
<div class="row">
    <div class="col-4">
    </div>
</div>


<!-- Modal Dialog Scrollable -->
<div class="modal fade" id="schooldetails" tabindex="-1">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@SelectedSchool?.Name</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (SelectedSchool is not null)
                {
                    <SchoolDetailsSIdebar SchoolId="@SelectedSchool.Id"/>
                }
                else
                {
                    <p>No school selected</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div><!-- End Modal Dialog Scrollable-->



              <!-- Vertically centered Modal -->
             
<div class="modal fade" id="createschool" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create School</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @* <NewSchool/> *@
                            <EditForm Model="newSchool" OnSubmit="Hundle">
                                <InputText @bind-Value="newSchool.Name" class="form-control my-1" placeholder="School Name"/>
                                <InputText @bind-Value="newSchool.Email" class="form-control my-1" placeholder="School Dean Email"/>
                            </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-success">Create</button>
            </div>
        </div>
    </div>
</div><!-- End Vertically centered Modal-->


<div class="col-12 ">
    <div class="d-flex justify-content-between">
        <div>
            <h5 class="card-title">School list</h5>
        </div>
        <div class="my-2">
            <button @onclick="() => NewSchool()" class="button-outlined" data-bs-toggle="modal" data-bs-target="#createschool">Add School</button>
        </div>
    </div>
    @if (SchoolService.Objects == null)
    {
        <Loading/>
    }
    else if (SchoolService.Objects.Count == 0)
    {
        <p>No programs found.</p>
    }
    else
    {

        <table class="table table-hover datatable">
            <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Name</th>
                <th scope="col">Dean Email</th>
                <th scope="col">Number of Programs</th>
                <th scope="col">Department</th>
                <th scope="col">Actions</th>
            </tr>
            </thead>
            <tbody class="grid-max-height">
            @if (FilteredSchools is not null)
            {
                @foreach (var context in FilteredSchools)
                {
                    <tr>
                        <th>@context.Id.ToString()</th>
                        <th>@context.Name</th>
                        <th>@context.Email</th>
                        <th>@GetNumberOfSchools(context).ToString()</th>
                        <th>@GetNumberOfDepartments(context).ToString()</th>
                        <th>
                            <button class="button-outlined p-1 m-1" @onclick="() => ShowDetails(context)" data-bs-toggle="modal" data-bs-target="#schooldetails">View details</button>
                        </th>
                    </tr>
                }
            }
            else
            {
                <Loading/>
            }
            
            </tbody>
        </table>
    }
</div>


@code {
    public bool ViewSchoolVisibility { get; set; } = false;
    public School SelectedSchool { get; set; }
    IQueryable<School>? itemsQueryable;
    public void ShowDetails(School school)
    {
        SelectedSchool = school;
        ViewSchoolVisibility = true;
        StateHasChanged();
        
    }
    IQueryable<School> FilteredSchools
    {
        get
        {
            var result = itemsQueryable?.Where(c => c.Id <= 2000);
            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c => c.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            return result;
        }
    }
    public string nameFilter;
    public bool NewSchoolVisibility { get; set; } = false;
    QuickGrid<School>? grid;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    protected override async void OnInitialized()
    {
        await SchoolService.Get();
        await ProgramServices.Get();
        await DepartmentService.Get();
        itemsQueryable = SchoolService.Objects.AsQueryable();
        StateHasChanged();
    }
    Task NewSchool()
    {
        ResetAll();
        NewSchoolVisibility = NewSchoolVisibility ? false : true;
        StateHasChanged();
        return Task.CompletedTask;
    }
    async Task DeleteSchool(int id)
    {
        await SchoolService.Delete(id);
        StateHasChanged();
    }
    void ResetAll()
    {
        NewSchoolVisibility = false;
        StateHasChanged();
    }
    int GetNumberOfSchools(School context) => ProgramServices.Objects.Where(x => x.Department.SchoolId == context.Id).ToList().Count;
    int GetNumberOfDepartments(School context) => DepartmentService.Objects.Where(x => x.SchoolId == context.Id).ToList().Count;
    
    
    
    public CreateSchoolDto newSchool { get; set; } = new();
    public List<School> Schools { get; set; }
    [Parameter]
    public bool IsVisible { get; set; } = false;
    public string Visibility => IsVisible ? "show-overlay" : "hide-overlay";
    Task Close()
    {
        IsVisible = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

    Task Hundle()
    {
        var request = SchoolService.Create(newSchool);
        OnInitialized();
    //IsVisible = false;
    //StateHasChanged();
        return Task.CompletedTask;
    }
}