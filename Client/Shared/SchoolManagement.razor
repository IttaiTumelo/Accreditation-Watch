@page "/school"
@inject ISchoolService SchoolService
@inject IProgramService ProgramServices
@inject IDepartmentService DepartmentService
<div class="row">
    <div class="col-9">
        <h3>School</h3>
    </div>
    <div class="col-3">
        <button @onclick="() => NewSchool()" class="btn  btn-info col mx-1">Add School</button>
    </div>
</div>
    @if (SchoolService.Objects == null)
    {
        <Loading />
    }
    else if (SchoolService.Objects.Count == 0)
    {
        <p>No programs found.</p>
    }
    else
    {
        <div class="row">
            <div class="col-9">
                <QuickGrid Items="FilteredSchools" Theme="default" Virtualize="true" Pagination="@pagination">
                    <PropertyColumn Property="p => p.Id" Sortable="true" />
                    <PropertyColumn Property="@(c => c.Name)" Sortable="true" Class="country-name">
                        <ColumnOptions>
                            <div class="search-box">
                                <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="School Name..." />
                            </div>
                        </ColumnOptions>
                    </PropertyColumn>
                    <TemplateColumn Title="Programs">
                        <div class="text-center">
                            <p>@GetNumberOfSchools(context)</p>
                        </div>
                    </TemplateColumn>
                    <TemplateColumn Title="Departments">
                        <div class="text-center">
                            <p>@GetNumberOfDepartments(context)</p>
                        </div>
                    </TemplateColumn>
                    <TemplateColumn Title="Actions">
                    
                            <button class="btn btn-outline-light" @onclick="()=>ShowDetails(context)">Edit</button>
                    </TemplateColumn>
                </QuickGrid>
                <Paginator Value="@pagination" />
            </div>
            <div class="col-3">
                @if (ViewSchoolVisibility)
                {
                    <SchoolDetailsSIdebar SchoolId="@SelectedSchoolId" />
                }
            </div>
        </div>
    }
<NewSchool IsVisible="@NewSchoolVisibility" />

@code {
    public bool ViewSchoolVisibility { get; set; } = false;
    public int SelectedSchoolId { get; set; }
    IQueryable<School>? itemsQueryable;
    public void ShowDetails(School school)
    {
        SelectedSchoolId = school.Id;
        ViewSchoolVisibility = ViewSchoolVisibility ? true : true;
        StateHasChanged();
    }
    IQueryable<School> FilteredSchools
    {
        get
        {
            var result = itemsQueryable?.Where(c => c.Id <= 2000);
            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c => c.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            return result;
        }
    }
    public string nameFilter;
    public bool NewSchoolVisibility { get; set; } = false;
    QuickGrid<School>? grid;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    protected override async void OnInitialized()
    {
        await SchoolService.Get();
        await ProgramServices.Get();
        await DepartmentService.Get();
        itemsQueryable = SchoolService.Objects.AsQueryable();
        StateHasChanged();
    }
    Task NewSchool()
    {
        ResetAll();
        NewSchoolVisibility = NewSchoolVisibility ? false : true;
        StateHasChanged();
        return Task.CompletedTask;
    }
    async Task DeleteSchool(int id)
    {
        await SchoolService.Delete(id);
        StateHasChanged();
    }
    void ResetAll()
    {
        NewSchoolVisibility = false;
        StateHasChanged();
    }
    int GetNumberOfSchools(School context) => ProgramServices.Objects.Where(x => x.Department.SchoolId == context.Id).ToList().Count;
    int GetNumberOfDepartments(School context) => DepartmentService.Objects.Where(x => x.SchoolId == context.Id).ToList().Count;
}