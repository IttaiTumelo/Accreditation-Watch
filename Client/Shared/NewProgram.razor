@inject IProgramService programService
@inject IDepartmentService departmentService
@*@inject IAccrediteService accrediteService*@
@inject ISchoolService schoolService
@using Program = Accreditation_Watch.Shared.Entities.Program
@if( Departments is null || Schools is null)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
            <p class="text-danger">@ErrorMessage</p>
            <p class="text-success">@SuccessMessage</p>
    <EditForm Model="program" OnSubmit="Hundle">
                <div class="form-group">
                    <label for="program-name">Name</label>
            <InputText @bind-Value="program.Name" class="form-control" placeholder="Program Name" />
                </div>
                <div class="form-group">
                    <label for="program-name">Dates</label>
                    <div class="row">
                <div class="col"><InputDate @bind-Value="program.ValidFrom" class="form-control" placeholder="Valid From" /></div>
                <div class="col"><InputDate @bind-Value="program.ValidTo" class="form-control" placeholder="Program Name" /></div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="program-name">Department</label>
            <InputSelect @bind-Value="program.DepartmentId" class="form-control" placeholder="Program Name">
                        @foreach (var department in Departments)
                        {
                            <option value="@department.Id">@department.Name</option>
                        }
                    </InputSelect>
                </div>

                <div class="form-group">
                    <label for="program-name">School</label>
                    <InputSelect @bind-Value="SchoolId" class="form-control" placeholder="School">
                        @foreach (var school in Schools)
                        {
                            <option value="@school.Id">@school.Name</option>
                        }
                    </InputSelect>
                </div>

                <div class="form-group">
                    <label for="program-name">Accreditation Status</label>
            <InputNumber @bind-Value="program.AccreditStatusId" class="form-control" placeholder="Program Name" />
                </div>
               <button class="button-success col-12 my-2" type="submit">Stubmit</button>
          </EditForm>
}
@code {
    public string ErrorMessage = "";
    public string SuccessMessage = "";
    public int DepartmentId { get; set; }
    public int AccrediteId { get; set; }
    public int SchoolId { get; set; }
    [Parameter]
    public Accreditation_Watch.Shared.Entities.Program program { get; set; } = new();
    // public Program Program{ get; }
    [Parameter]
    public bool IsVisible { get; set; } = true;
    public string Visibility => IsVisible ? "show-overlay" : "hide-overlay";

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }
    Task Close()
    {
        // IsVisible = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task Hundle()
    {
        // newProgram.Department = Departments.First(x => x.Id == DepartmentId);
        // newProgram.Accredite = Accredites.First(x => x.Id == AccrediteId);
        // newProgram.School = Accredites.First(x => x.Id == AccrediteId);
        try
        {
            if(program.Id != 0)
            {
                var request = programService.Update(program);
                SuccessMessage = "Updated";
                await Task.Delay(2000);
                IsVisible = false;
                StateHasChanged();
            }
            else
            {
                var request = programService.Create(program as CreateProgramDto);
                SuccessMessage = "Created";
                await Task.Delay(2000);
                IsVisible = false;
                StateHasChanged();
            }
            
        }catch(Exception ex)
        {
            ErrorMessage = ex.Message;
        }


    }

    public List<Department> Departments { get; set; }
    public List<School> Schools { get; set; }

    protected override async void OnInitialized()
    {
        Departments = await departmentService.Get();
        Schools = await schoolService.Get();
        StateHasChanged();
    }

     
  
}
