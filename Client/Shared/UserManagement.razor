@inject IUserService UserService
@inject IRoleService RoleService
@attribute [Authorize(Roles = "Admin")]
<h3>User Management</h3>
<div class="row">
    <div class="col-12">
        <div class="row">
            <div class="col">
                <h4>All Users</h4>
            </div>
            <div class="col">
                <button @onclick="()=>IsVisible = true" class="btn btn-primary float-end">Add User</button>
            </div>
        </div>

        <QuickGrid Items="Users.AsQueryable()" Theme="default" Virtualize="true">
            <PropertyColumn Property="p => p.Id" Sortable="true" />
            <PropertyColumn Property="p => p.Name" Sortable="true" />
            @*<PropertyColumn Property="p => p.Role.Name" Sortable="true" />*@
            <TemplateColumn Title="Role">
                <!-- Split dropend button -->
                
                <select type="text" @bind="@context.Role.Id" class="form-control" placeholder="Basic">
                    @foreach (var role in RoleService.Objects)
                    {
                        <option @onclick="()=>{SetRole(context, role);}" value="@role.Id">@role.Name</option>
                    }
                </select>

            </TemplateColumn>
            <TemplateColumn Title="Role">
                <!-- Split dropend button -->
                
            </TemplateColumn>
        </QuickGrid>
    </div>

</div>


<div id="@Visibility" class="d-flex justify-content-center align-items-center">
       
        <div style="background-color : #fff; border-radius: 10px;" class="p-5">
          <div class="row">
                      <h3 class="col">Add User</h3>
                      <div class="col-1"><button @onclick="()=>Close()" class=" btn-close btn-danger"></button></div>
          </div>
            <p class="text-danger">@ErrorMessage</p>
            <p class="text-success">@SuccessMessage</p>
        <span class="text-danger">@ErrorMessage</span>
        <EditForm Model="newUser" OnValidSubmit="AddUser">
            @*<DataAnnotationsValidator />*@
            <div class="form-group">
                <label for="Name">Name</label>
                <InputText class="form-control" id="Name" @bind-Value="newUser.Name" />
            </div>
            <div class="form-group">
                <label for="Email">Email</label>
            <InputText class="form-control" id="Email" @bind-Value="newUser.Email" />
            </div>
            <div class="form-group">
                <label for="Email">Password</label>
                <InputText class="form-control" id="Email" @bind-Value="newUser.Password" />
            </div>
            <div class="form-group">
                <label for="Role">Role</label>
            <InputSelect class="form-control" id="Role" @bind-Value="newUser.Role">
                    <option value="Admin">Admin</option>
                    <option value="User">User</option>
                </InputSelect>
            </div>
            <button type="submit" class="btn btn-primary col-12 my-2">Add User</button>
        </EditForm>
        </div>
</div>


@code {
    public string state { get; set; } = "disabled";
    public int roleId { get; set; }
    public bool IsVisible { get; set; } = false;
    public string Visibility => IsVisible ? "show-overlay" : "hide-overlay";
    public string SuccessMessage { get; set; } = "";
    public void Close()
    {
        IsVisible = false;
    }
    public string ErrorMessage { get; set; } = "";
    public UserDto newUser = new UserDto();
    public List<User> Users { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        await RoleService.Get();
        Users = await UserService.Get();
        StateHasChanged();
    }

    public async Task AddUser()
    {
        if (newUser.Password.Length < 6)
        {
            ErrorMessage = "Password must be at least 6 characters";
            return;
        }
        await UserService.Create(newUser);
        Users = await UserService.Get();
        StateHasChanged();
    }
    async Task SetRole(User user,Role role)
    {
        user.Role = role;
        await UserService.Update(user);
        StateHasChanged();
    }

}
