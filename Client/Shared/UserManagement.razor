@inject IUserService UserService
@* @attribute [Authorize(Roles = "Admin")] *@
<div class="row">
    <div class="col-12">
     
        <div class="row parent">
            <div class="col-12 ">
                @if (UserService.Objects == null)
                {
                    <Loading/>
                }
                else if (UserService.Objects.Count == 0)
                {
                    <p>No Users found.</p>
                }
                else
                {
                    <div class="d-flex justify-content-between">
                        <div>
                            <h5 class="card-title">User list</h5>
                        </div>
                        <div class="my-2">
                            <button class="button-outlined" data-bs-toggle="modal" data-bs-target="#addnewuser">Add User</button>
                        </div>
                    </div>
                    <table class="table table-hover datatable">
                        <thead>
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Name</th>
                            <th scope="col">Email</th>
                            <th scope="col">Roles</th>
                            <th scope="col">Actions</th>
                        </tr>
                        </thead>
                        <tbody  class="grid-max-height">
                        @foreach (var context in UserService.Objects)
                        {
                            <tr>
                                <th >@context.Id.ToString()</th>
                                <th >@context.Name</th>
                                <th >@context.Email</th>
                                <th >

                                    <select type="text" @bind="@context.Role" class="form-control" placeholder="Basic">
                                        @foreach (var role in Enum.GetValues(typeof(Role)))
                                        {
                                            <option value="@role">@role</option>
                                        }
                                    </select>
                                </th>
                                <th >
                                    <button @onclick="() => SetRole(context)" class="btn btn-primary">Save</button>
                                </th>
                            </tr>
                        }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
</div>


             
<div class="modal fade" id="addnewuser" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="text-danger">@ErrorMessage</p>
                <p class="text-success">@SuccessMessage</p>
                <span class="text-danger">@ErrorMessage</span>
                <form>
                    @*<DataAnnotationsValidator />*@
                    <div class="form-group">
                        <label for="Name">Name</label>
                        <InputText class="form-control" id="Name" @bind-Value="newUser.Name"/>
                    </div>
                    <div class="form-group">
                        <label for="Email">Email</label>
                        <InputText class="form-control" id="Email" @bind-Value="newUser.Email"/>
                    </div>
                    <div class="form-group">
                        <label for="Email">Password</label>
                        <InputText class="form-control" id="Email" @bind-Value="newUser.Password"/>
                    </div>
                    <div class="form-group">
                        <label for="Role">Role</label>
                        <select type="text" @bind="@newUser.Role" class="form-control" placeholder="Basic">
                            @foreach (var role in Enum.GetValues(typeof(Role)))
                            {
                                <option value="@role">@role</option>
                            }
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-success"  data-bs-dismiss="modal"  @onclick="AddUser">Create</button>
            </div>
        </div>
    </div>
</div><!-- End Vertically centered Modal-->




@code {
    public string state { get; set; } = "disabled";
    public int roleId { get; set; }
    public bool IsVisible { get; set; } = false;
    public string Visibility => IsVisible ? "show-overlay" : "hide-overlay";
    public string SuccessMessage { get; set; } = "";
    public void Close()
    {
        IsVisible = false;
    }
    public string ErrorMessage { get; set; } = "";
    public UserDto newUser = new UserDto();
    public List<User> Users { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        Users = await UserService.Get();
        StateHasChanged();
    }

    public async Task AddUser()
    {
        if (newUser.Password.Length < 6)
        {
            ErrorMessage = "Password must be at least 6 characters";
            return;
        }
        await UserService.Create(newUser);
        Users = await UserService.Get();
        StateHasChanged();
    }
    async Task SetRole(User user)
    {
        await UserService.UpdateRole(user);
        StateHasChanged();
    }

}
